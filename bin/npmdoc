#!/usr/bin/perl

# Created on: 2016-06-08 09:39:03
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Tiny;
use WWW::Mechanize::Cached;
use CHI;
use File::Temp qw/tempdir/;
use JSON::XS qw/decode_json/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    cache    => '/tmp/npmupdater',
    registry => do { $_ = `npm get registry`; chomp; s{/$}{};  $_ },
    verbose  => 0,
    man      => 0,
    help     => 0,
    VERSION  => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'cache|c=s',
        'registry|r=s',
        'versions|V!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $mech = WWW::Mechanize::Cached->new(
        cache => CHI->new(
            driver   => 'File',
            root_dir => $option{cache},
        ),
    );

    my $module = shift @ARGV;
    my $dir    = tempdir( CLEANUP => 1 );

    warn "Getting $option{registry}/$module\n" if $option{verbose};
    $mech->get("$option{registry}/$module");
    my $json = decode_json( $mech->content );

    my $readme = path($dir, "$module.md");
    $readme->spew($json->{readme});

    if ( exe_exists('md2man-roff') ) {
        system "md2man-roff $readme > $dir/$module.roff";
    }
    elsif ( exe_exists('go-md2man') ) {
        system "go-md2man -in=$readme -out=$dir/$module.roff";
    }
    else {
        warn <<'MESSAGE';
Can't find either md2man-roff or go-md2man

You may be able to install these in the following ways:
  Debian/Ubuntu:
    sudo apt install go-md2man
  If Ruby is installed:
    sudo gem install md2man

MESSAGE
        return;
    }

    if ($option{versions}) {
        print "$module version:\n  ";
        print join "\n  ", sort {
            my $A=$a;
            my $B=$b;
            $A =~ s/(\d+)/sprintf "%05i", $1/egxms;
            $B =~ s/(\d+)/sprintf "%05i", $1/egxms;
            $A cmp $B
        } keys %{ $json->{versions} };
        print "\n";
    }
    else {
        system "man -l $dir/$module.roff";
    }

    return;
}

sub exe_exists {
    my ($exe) = @_;

    for my $dir (split /:/, $ENV{PATH}) {
        next if !-d $dir;
        return 1 if -e path($dir, $exe);
    }

    return 0;
}

__DATA__

=head1 NAME

npmdoc - Quick helper to read documentation about npm modules

=head1 VERSION

This documentation refers to npmdoc version 0.0.1

=head1 SYNOPSIS

   npmdoc [option] package

 OPTIONS:
  -c --cache[=]dir
                Directory to store cached npmjs.com calls
  -r --registry[=]url
                Specify an alternate NPM registry to use
  -V --versions Show all available versions

  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for npmdoc

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2016 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
